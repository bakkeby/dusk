# The below configuration file is parsed using the libconfig library.
#
# Refer to the official documentation if you need it. Here is a quick breakdown
# of the syntax used.
#
# A value can be set using an equals sign or a colon, the trailing semicolon is optional
# and whitespace is not significant.
#
#   name = value;
#   name: value;
#
# { settings ... }  - curly braces denote a group of settings, and a group can contain
#                     multiple types of configuration
# [ value, ... ]    - square brackets denote an array, and all values within the array
#                     must be of the same configuration type
# ( value, ... )    - parentheses denote a list, and a list can contain multiple groups,
#                     arrays, scalar values or other lists
# /* */, // and #   - treated as comments
# @included "path"  - include another configuration file - useful if you want to split
#                     the configuration into smaller parts
#
# When it comes to syntax highlighting for these kind of configuration files you may
# try Ruby, awk, cucumber, perl, puppet or R.
#


# Below we have some global configuration options, refer to
# the wiki page for more information.
#
# Note that in general if configuration options are omitted in this file then
# dusk will revert to using the default compile-time configuration.
#
# https://github.com/bakkeby/dusk/wiki/Configuration
#
borderpx = 5;  # border pixel of windows
snap = 32;     # snap pixel

mfact = 0.50;  # factor of master area size [0.05..0.95]
nmaster = 1;   # number of clients in master area
nstack = 0;    # number of clients in primary stack area

fonts = [ "monospace:size=10" ];

# The attach method controls where in the stack a new window will appear when
# it is first mapped.
#
# For example the new window could become the new master, or it could be added
# as the very last window on the current workspace.
#
# Attach method options:
#    AttachMaster, AttachAbove, AttachAside, AttachBelow or AttachBottom
#
# https://github.com/bakkeby/dusk/wiki/Attach
#
attach_method = "AttachAside";

# This contains a list of named commands.
#
# These names are later used when configuring keybindings as well as autostart
# commands.
#
# The commands are in execv format which means separate strings for each parameter.
# For example "st", "-n", "name" rather than "st -n name".
#
# Scratchpad commands also specify a scratch key that is used to identify
# clients via client rules. Note that scratch keys should be a single character only.
#
# The statusclickcmd command is used to handle mouse clicks on statuses. If this is
# not defined here then it will fall back to whatever is defined in the hardcoded config.
#
commands = (
  { name = "termcmd", command = [ "st" ] },
  { name = "dmenucmd", command = [ "dmenu_run" ] },
  { name = "spcmd_w", scratchkey = "w", command = [ "st", "-n", "spterm (w)", "-g", "120x34" ] },
  { name = "spcmd_e", scratchkey = "e", command = [ "st", "-n", "spterm (e)", "-g", "120x34" ] },
  { name = "spcmd_r", scratchkey = "r", command = [ "st", "-n", "spfm (r)", "-g", "120x34", "-e", "ranger" ] },
  { name = "statusclickcmd", command = [ "~/bin/statusbar/statusclick.sh" ] },
)

# List of programs to start automatically during startup only. Note that
# these will not be executed again when doing a restart. The values are
# # names referring to the commands list above.
#
# https://github.com/bakkeby/dusk/wiki/autostart
#
autostart = [ "termcmd" ];

# List of programs to start automatically during a restart only. These
# should usually be short scripts that perform specific operations like
# changing a wallpaper.
autorestart = [ ];

# This controls the amount of empty space to add between tiled client windows.
#
# https://github.com/bakkeby/dusk/wiki/Gaps
#
gaps:
{
  ih = 5;  # horiz inner gap between windows
  iv = 5;  # vert inner gap between windows
  oh = 5;  # horiz outer gap between windows and screen edge
  ov = 5;  # vert outer gap between windows and screen edge
  fl = 5;  # gap between floating windows (when relevant)
  enabled = true;  # whether gaps are enabled by default or not
  # smartgaps factor when there is only one client
  smartgaps_fact = 0;  # 0 = no gaps, 3 = 3x outer gaps
}

# This controls features that can be toggled on or off globally, the majority of which
# can also be toggled during runtime.
#
# https://github.com/bakkeby/dusk/wiki/Functionality
#
functionality:
{
  AutoReduceNmaster = false;  # automatically reduce the number of master clients if one is closed
  BanishMouseCursor = false;  # like xbanish, hides mouse cursor when using the keyboard
  BanishMouseCursorToCorner = false;  # makes BanishMouseCursor move the cursor to one of the corners of the focused window
  SmartGaps = false;  # enables no or increased gaps if there is only one visible window
  SmartGapsMonocle = false;  # enforces no gaps in monocle layout
  Systray = true;  # enables a systray in the bar
  SystrayNoAlpha = false;  # disables the use of transparency for the systray, enable if you do not use a compositor
  Swallow = true;  # allows X applications started from the command line to swallow the terminal
  SwallowFloating = true;  # allow floating windows to swallow the terminal by default
  CenteredWindowName = true;  # center the window titles on the bar
  BarActiveGroupBorderColor = false;  # use border color of active group for the bar, otherwise normal scheme is used
  BarMasterGroupBorderColor = false;  # use border color of master group for the bar, otherwise normal scheme is used
  FlexWinBorders = false;  # use the SchemeFlex* color schemes, falls back to SchemeTitle* if disabled
  SpawnCwd = true;  # spawn applications in the currently selected client's working directory
  ColorEmoji = true;  # enables color emoji support (removes Xft workaround)
  Status2DNoAlpha = false;  # option to not use alpha when drawing status2d status
  BarBorder = true;  # draw a border around the bar
  BarBorderColBg = false;  # optionally use the bar background colour for the bar border (rather than border colour)
  BarPadding = true;  # add vertical and side padding as per vertpad and sidepad variables above
  NoBorders = false;  # as per the noborder patch, show no border when only one client in tiled mode
  Warp = false;  # warp cursor to currently focused window
  DecorationHints = false;  # omit drawing the window border if the applications asks not to
  FocusedOnTop = false;  # allows focused window to stay on top of other windows
  FocusedOnTopTiled = false;  # additional toggle to allow focused tiled clients to show on top of floating windows
  FocusFollowMouse = true;  # allow window under the mouse cursor to get focus when changing views or killing clients
  FocusOnClick = false;  # only allow focus change when the user clicks on windows (disables sloppy focus)
  FocusOnNetActive = true;  # allow windows demanding attention to receive focus automatically
  AllowNoModifierButtons = true;  #allow some window operations, like move and resize, to work without having to hold down a modifier key
  CenterSizeHintsClients = true;  # center tiled clients subject to size hints within their tiled area
  ResizeHints = false;  # respect size hints also when windows are tiled
  SnapToWindows = true;  # snap to windows when moving floating clients
  SnapToGaps = true;  # snap to outer gaps when moving floating clients
  SortScreens = false;  # monitors are numbered from left to right
  ViewOnWs = false;  # follow a window to the workspace it is being moved to
  Xresources = true;  # add support for changing colours via Xresources
  Debug = false;  # enables additional debug output
  AltWindowTitles = true;  # show alternate window titles, if present
  AltWorkspaceIcons = false;  # show the workspace name instead of the icons
  GreedyMonitor = false;  # disables swap of workspaces between monitors
  SmartLayoutConversion = true;  # automatically adjust layout based on monitor orientation when moving a workspace from one monitor to another
  AutoHideScratchpads = false;  # automatically hide open scratchpads when moving to another workspace
  RioDrawIncludeBorders = false;  # indicates whether the area drawn using slop includes the window borders
  RioDrawSpawnAsync = false;  # spawn the application alongside rather than after drawing area using slop
  RestrictFocusstackToMonitor = true;  # restrict focusstack to only operate within the monitor, otherwise focus can drift between monitors
  WinTitleIcons = false;  # adds application icons to window titles in the bar
  StackerIcons = true;  # adds a stacker icon hints in window titles
  WorkspaceLabels = false;  # adds the class of the master client next to the workspace icon
  WorkspacePreview = false;  # adds preview images when hovering workspace icons in the bar
}

# Parameters passed to slop for the riodraw feature.
# do NOT define -f (format) here.
#
# https://github.com/bakkeby/dusk/wiki/riospawn
#
slop:
{
  spawn_style = "-t 0 -c 0.92,0.85,0.69,0.3 -o";
  resize_style = "-t 0 -c 0.92,0.85,0.69,0.3";
}

# This affects some of the floatpos functionality in relation to grid positions and
# where a tiled window is initially placed when it is made floating.
#
# https://github.com/bakkeby/dusk/wiki/floatpos
#
floatpos:
{
  grid_x = 5;  # float grid columns
  grid_y = 5;  # float grid rows
  toggle_position = "50% 50% 80% 80%";  # default floating position when triggering togglefloating
}

# Optionally the client opacity can be changed when the window is being moved,
# resized or placed. Example value: 0.75. 0 means do not apply opacity.
opacity:
{
  default = 0;
  move = 0;
  resize = 0;
  place = 0;
}

# Indicators are small squares or symbols drawn at for example the top left of a
# window title to indicate state (e.g. that it is floating) or next to a workspace
# icon to indicate that the workspace has clients.
#
# Indicator options:
#    top_left_square         top_centered_dot      box_wider               custom_1
#    top_left_larger_square  bottom_bar            box_full                custom_2
#    top_right_triangle      bottom_bar_slim       client_dots             custom_3
#    top_right_pin           bottom_bar_slim_dots  plus                    custom_4
#    top_bar                 bottom_centered_dot   plus_and_square         custom_5
#    top_bar_slim            box                   plus_and_larger_square  custom_6
#
# https://github.com/bakkeby/dusk/wiki/Bar-Indicators
#
indicator:
{
  WsOcc = "none";
  WsSel = "none";
  WsVis = "none";
  WsNorm = "none";
  PinnedWs = "none";
  FakeFullScreen = "plus";
  FakeFullScreenActive = "plus_and_larger_square";
  FloatFakeFullScreen = "plus";
  FloatFakeFullScreenActive = "plus_and_larger_square";
  Tiled = "none";
  Floating = "top_left_larger_square";
  Selected = "none";
  custom:
  {
    custom_1 = "^c#00A523^^r0,h,w,2^";  # green underline
    custom_2 = "^c#55cdfc^^r3,3,4,4^^c#E72608^^r4,4,2,2^";  # blue rectangle
    custom_3 = "^f-10^^c#E72608^𐄛";  # example using a character as an indicator
    custom_4 = "^c#E26F0B^^r0,h,w,1^^r0,0,1,h^^r0,0,w,1^^rw,0,1,h^";  # orange box
    custom_5 = "^c#CB9700^^r0,h,w,1^^r0,0,w,1^";  # top and bottom lines
    custom_6 = "^c#F0A523^^r6,2,1,-4^^r-6,2,1,-4^";  # orange vertical bars
  }
}

# This section contains options to control what is retained across runtime restarts.
restart:
{
  # By default the state of clients are persisted across restarts. For example if a window
  # is started on a particular workspace then the window will remain on that workspace when
  # dusk is restarted.
  #
  # If a client has been subject to a client rule then rules will not be reapplied when dusk
  # is restarted. This may of course interfere when doing the initial setup of rules using
  # runtime configuration. As such the below setting allows for the feature to be disabled
  # meaning that all existing windows will be treated as new windows, thus being subject to
  # client rules. Note that if this is disabled then all windows that are not subject to
  # client rules will end up on the first workspace.
  persist_client_states_across_restarts = true;

  # By default the state of workspaces are persisted across restarts. For example if you change
  # the layout of a workspace then that layout will remain on the workspace when dusk is restarted.
  #
  # This can, however, cause some confusion when configuring dusk using runtime configuration
  # as specifying a new layout via workspace rules may not come into effect following a restart.
  # As such the below setting allows for the feature to be disabled meaning that workspaces will
  # always revert back to their original settings as per workspace rules.
  persist_workstate_states_across_restarts = true;
}

# Workspace settings.
#
# https://github.com/bakkeby/dusk/wiki/Workspaces
#
workspace:
{
  # When the WorkspacePreview functionality is enabled, this setting controls
  # the size of workspace previews relative to monitor size.
  preview_factor = 0.25;

  labels:
  {
    occupied_format = "%s: %s";  # format of an occupied workspace label
    vacant_format = "%s";  # format of an empty / vacant workspace
    lower_case = true;  # whether or not to change workspace labels to lower case
    prefer_window_icons = false;  # whether to use window icons instead of labels when present
    swap_occupied_format = false;  # false gives "icon: label", true gives "label: icon" */
  }

  # This determines what happens with workspaces pinned to a monitor when that monitor is removed.
  #   0 - the workspaces become unpinned and are moved to another monitor or
  #   1 - the workspace clients are moved to the selected workspace on the first monitor, but
  #       the workspace itself is hidden
  #
  # Non-pinned workspaces are always redistributed among the remaining monitors.
  #
  per_monitor = false;

  # Workspace rules define what workspaces are available and their properties.
  # All options fall back to global settings if not specified.
  #
  #    name (str)    - the name of the workspace, this is a reference used for keybindings only
  #    monitor (int) - the monitor the workspace starts on, assigned freely if not specified
  #    pinned (bool) - whether the workspace is pinned to the assigned monitor
  #    layout        - the layout the workspace should use; the value can either be the index
  #                    in the layouts array or it can be a string referring to the layout name
  #    mfact (float) - factor of master area size
  #    nmaster (int) - number of clients in master area
  #    nstack (int)  - number of clients in primary stack area
  #    gaps (bool)   - whether gaps are enabled for the workspace
  #
  #    icons:
  #       def   - the default icon shown for the workspace, if empty string then the workspace is
  #               hidden by default, if NULL then the workspace name is used for the icon
  #       vac   - the vacant icon shows if the workspace is selected, the default icon is an empty
  #               string (hidden by default) and the workspace has no clients
  #       occ   - the occupied icon shows if the workspace has clients
  #
  rules = (
    { name = "1", pinned = false, icons: { def = "1", vac = "", occ = "[1]" }},
    { name = "2", pinned = false, icons: { def = "2", vac = "", occ = "[2]" }},
    { name = "3", pinned = false, icons: { def = "3", vac = "", occ = "[3]" }},
    { name = "4", pinned = false, icons: { def = "4", vac = "", occ = "[4]" }},
    { name = "5", pinned = false, icons: { def = "5", vac = "", occ = "[5]" }},
    { name = "6", pinned = false, icons: { def = "6", vac = "", occ = "[6]" }},
    { name = "7", pinned = false, icons: { def = "7", vac = "", occ = "[7]" }},
    { name = "8", pinned = false, icons: { def = "8", vac = "", occ = "[8]" }},
    { name = "9", pinned = false, icons: { def = "9", vac = "", occ = "[9]" }},
  )
}

# Bar configuration.
#
#   showbar          - whether to show bar on startup or not
#   height           - bar height - 0 means derive from font (default), >= 1 explicit height
#   vertpad          - outer vertical padding of bar, defaults to borderpx if not specified
#   sidepad          - outer horizontal padding of bar, defaults to borderpx if not specified
#   text_padding     - inner horizontal padding (increases lrpad)
#   height_padding   - inner vertical padding (increases derived bar height, overridden by
#                      explicit height if specified)
#   systray_spacing  - the amount of space to add between systray icons (in pixels)
#   alpha_bg         - the default background transparency level (0 - 255, or 0x00 - 0xFF)
#
# https://github.com/bakkeby/dusk/wiki/Bar
#
bar:
{
  showbar = true;
  height  = 0;
  text_padding = 2;
  height_padding = 0;
  systray_spacing = 2;
  alpha_bg = 0xd0;

  #
  # Bar settings, this defines what bars exists, their position, and what attributes they have.
  #
  # monitor   - the exact monitor number the bar should be created on
  #             (0 - primary, 1 - secondary, 2 - tertiary)
  # bar       - the bar index, used in relation to bar rules below
  #             (bar indexes can be reused across monitors)
  # vert      - whether the bar is horizontal (0) or vertical (1), not
  #             all bar modules will have support for being displayed
  #             in a vertical bar
  # name      - does nothing, intended as visual clue and for logging / debugging
  # extclass  - WM class to match on for external bars
  # extinst   - WM instance to match on for external bars
  # extname   - WM name to match on for external bars
  #
  # Bar positioning consists of four values, x, y, w and h which,
  # similarly to floatpos, can have different meaning depending on
  # the characters used. Absolute positioning (as in cross-monitor)
  # is not supported, but exact positions relative to the monitor
  # can be used. Percentage values are recommended for portability.
  #
  # All values can be a percentage relative to the space available
  # on the monitor or they can be exact values, here are some example
  # values:
  #    x
  #               0% - left aligned (default)
  #             100% - right aligned
  #              50% - bar is centered on the screen
  #               0x - exact position relative to the monitor
  #              -1x - value < 0 means use default
  #    y
  #               0% - top bar (default)
  #             100% - bottom bar
  #               0y - exact position relative to the monitor
  #              -1y - value < 0 means use default
  #    w
  #             100% - bar takes up the full width of the screen (default)
  #              20% - small bar taking a fifth of the width of the screen
  #             500w - the bar is 500 pixels wide (including border)
  #              -1w - value <= 0 means use default
  #    h
  #             100% - bar takes up the full height of the screen
  #              20% - small bar taking a fifth of the height of screen
  #              30h - the bar is 30 pixels high (including border)
  #              -1h - value <= 0 means use the default (deduced by font size)
  #
  # Note that vertical and horizontal side padding are controlled by the
  # vertpad and sidepad variables towards the top of this configuration file.
  #
  # https://github.com/bakkeby/dusk/wiki/Bar-Placement
  #
  bars = (
    # monitor      bar             x     y      w     h     name
    { monitor = 0, bar = 0, pos = "0%    0%     100% -1h ", name = "Primary top" },
    { monitor = 0, bar = 1, pos = "0%    100%   100% -1h ", name = "Primary bottom" },
    { monitor = 1, bar = 0, pos = "0%    0%     100% -1h ", name = "Secondary top" },
    { monitor = 1, bar = 1, pos = "0%    100%   100% -1h ", name = "Secondary bottom" },
    { monitor = 2, bar = 0, pos = "0%    0%     100% -1h ", name = "Tertiary top" },
    { monitor = 2, bar = 1, pos = "0%    100%   100% -1h ", name = "Tertiary bottom" },
  )

  #
  # Bar rules allow you to configure what is shown where on the bar.
  #
  #    monitor:
  #      -1  show on all monitors (default if not specified)
  #       0  show on monitor 0
  #      "A" show on active monitor (i.e. follow focused monitor)
  #    bar - bar index, 0 is default, 1 is extrabar
  #    scheme - defines the default scheme for the bar module, one of:
  #       Norm  TitleNorm  ScratchSel   HidSel   WsNorm  WsOcc      Urg
  #       Sel   TitleSel   ScratchNorm  HidNorm  WsSel   WsVisible  Marked
  #    padding - adds artificial spacing on both the left and right hand side of the module
  #    lpad - adds artificial spacing on the left hand side of the module
  #    rpad - adds artificial spacing on the right hand side of the module
  #    value - arbitrary value where the interpretation is module specific
  #       status - value indicates which status (index) the module applies to
  #       powerline - value indicates which powerline method to use, one of:
  #          None  RightArrow  LeftArrow  ForwardSlash  Backslash  Solid  SolidRev
  #       wintitle - same as powerline
  #       workspaces - same as powerline
  #    alignment - specifies how the module is aligned compared to other modules
  #       horizontal bar options:
  #          left           center         right          none
  #          left_left      left_center    left_right
  #          right_left     right_center   right_right
  #       vertical bar options:
  #          top            center         bottom         none
  #          top_top        top_center     top_bottom
  #          bottom_bottom  bottom_center  bottom_top
  #    module - specifies which bar module to display (mandatory)
  #    name - does nothing, intended as visual clue and for logging / debugging
  #
  # https://github.com/bakkeby/dusk/wiki/Bar-Rules
  #
  rules = (
    { monitor = -1, bar = 0, module = "powerline",         align = "left",        value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "left",        value = 7, padding = 5, name = "status7" },
    { monitor =  0, bar = 0, module = "powerline",         align = "left",        value = "PwrlForwardSlash" },
    { monitor = -1, bar = 0, module = "workspaces",        align = "left",        value = "PwrlForwardSlash", name = "workspaces" },
    { monitor =  0, bar = 0, module = "systray",           align = "right",       scheme = "SchemeWsSel", padding = 5, name = "systray" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor = -1, bar = 0, module = "powerline",         align = "left",        value = "PwrlForwardSlash" },
    { monitor = -1, bar = 0, module = "ltsymbol",          align = "left",        scheme = "SchemeWsVisible", name = "ltsymbol" },
    { monitor = -1, bar = 0, module = "powerline",         align = "left",        value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 0, padding = 5, name = "status0" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 1, padding = 5, name = "status1" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 2, padding = 5, name = "status2" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 3, padding = 5, name = "status3" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 4, padding = 5, name = "status4" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 5, padding = 5, name = "status5" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 6, padding = 5, name = "status6" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 8, padding = 5, name = "status8" },
    { monitor =  0, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor =  0, bar = 0, module = "status",            align = "right",       value = 9, padding = 5, name = "status9" },
    { monitor = -1, bar = 0, module = "powerline",         align = "right",       value = "PwrlForwardSlash" },
    { monitor = -1, bar = 0, module = "wintitle_sticky",   align = "none",        value = "PwrlForwardSlash", name = "wintitle_sticky" },
    { monitor = -1, bar = 0, module = "flexwintitle",      align = "none",        value = "PwrlForwardSlash", name = "flexwintitle" },
    { monitor = -1, bar = 1, module = "pwrl_ifhidfloat",   align = "center",      value = "PwrlForwardSlash" },
    { monitor = -1, bar = 1, module = "wintitle_hidden",   align = "right_right", value = "PwrlForwardSlash", name = "wintitle_hidden" },
    { monitor = -1, bar = 1, module = "wintitle_floating", align = "left_left",   value = "PwrlForwardSlash", name = "wintitle_floating" },
  )
}

# This adds some control over the display of window titles in the bar.
#
# https://github.com/bakkeby/dusk/wiki/FlexWinTitle-Module#weights
#
flexwintitle:
{
  masterweight = 15; # master weight compared to hidden and floating window titles
  stackweight  = 4;  # stack weight compared to hidden and floating window titles
  hiddenweight = 0;  # hidden window title weight
  floatweight  = 0;  # floating window title weight, set to 0 to not show floating windows
  separator    = 5;  # width of client separator
  icon:
  {
    size    = 16;    # icon size
    spacing = 5;     # space between icon and title
  }
}

# The color schemes mostly control the look of the bar, but also the border drawn around
# client windows. These can also be overridden via XResources.
#
# https://github.com/bakkeby/dusk/wiki/Xresources
#
colors:
{
  SchemeNorm        = { fg = "#D9CFC5", bg = "#492B2D", border = "#492B2D" },
  SchemeTitleNorm   = { fg = "#D9CFC5", bg = "#492B2D", border = "#643B3E" },
  SchemeTitleSel    = { fg = "#D9CFC5", bg = "#82363A", border = "#82363A" },
  SchemeScratchNorm = { fg = "#D9CFC5", bg = "#492B2D", border = "#643B3E" },
  SchemeScratchSel  = { fg = "#D9CFC5", bg = "#82363A", border = "#82363A" },
  SchemeHidNorm     = { fg = "#D9CFC5", bg = "#492B2D", border = "#000000" },
  SchemeHidSel      = { fg = "#D9CFC5", bg = "#82363A", border = "#000000" },
  SchemeUrg         = { fg = "#E0E0E0", bg = "#A23419", border = "#A23419" },
  SchemeMarked      = { fg = "#DDC470", bg = "#724559", border = "#724559" },
  SchemeWsNorm      = { fg = "#D9CFC5", bg = "#492B2D", border = "#000000" },
  SchemeWsVisible   = { fg = "#D9CFC5", bg = "#82363A", border = "#000000" },
  SchemeWsSel       = { fg = "#D9CFC5", bg = "#82363A", border = "#000000" },
  SchemeWsOcc       = { fg = "#D9CFC5", bg = "#492B2D", border = "#000000" },
}

# Layouts provides different options as to how windows are tiled.
#
#    name      - layout name, used for keybindings
#    symbol    - the layout symbol to be displayed in the bar
#    function  - the arrange function, derived to be flextile if a master option is specified
#
#      ------------ flextile specific options
#      nmaster    - number of clients in the master area
#      nstack     - number of clients in the primary stack area
#      split      - the layout split
#      master     - the master area arrangement
#      stack      - the primary stack arrangement
#      stack2     - the secondary stack arrangement
#      symbolfunc - special function that generates a symbol based
#                   on the number of clients
#
# Split options:
#    VERTICAL             HORIZONTAL             NO_SPLIT
#    VERTICAL_DUAL_STACK  HORIZONTAL_DUAL_STACK  FLOATING_MASTER
#    CENTERED_VERTICAL    CENTERED_HORIZONTAL
#
# Split options may also have a _FIXED suffix to indicate that the workspace
# area should not reduce depending on the number of clients.
#
# Tiling options for the master, stack and secondary stack areas:
#    TOP_TO_BOTTOM       DWINDLE_CFACTS      GAPLESSGRID_CFACTS
#    LEFT_TO_RIGHT       SPIRAL_CFACTS       ASPECTGRID
#    TOP_TO_BOTTOM_AR    TATAMI_CFACTS       MONOCLE
#    LEFT_TO_RIGHT_AR
#
# The _CFACTS suffix can be omitted if the layout should not respect client
# size factors.
#
# https://github.com/bakkeby/dusk/wiki/Layout
#
layouts = (
  { name = "tile",                 symbol = "[]=", split = "VERTICAL",            master = "TOP_TO_BOTTOM",      stack = "TOP_TO_BOTTOM" },
  { name = "columns",              symbol = "|||", split = "NO_SPLIT",            master = "LEFT_TO_RIGHT",      stack = "LEFT_TO_RIGHT" },
  { name = "rows",                 symbol = "===", split = "NO_SPLIT",            master = "TOP_TO_BOTTOM",      stack = "TOP_TO_BOTTOM" },
  { name = "monocle",              symbol = "[M]", split = "NO_SPLIT",            master = "MONOCLE",            stack = "MONOCLE", symbolfunc = "monoclesymbols" },
  { name = "col",                  symbol = "||=", split = "VERTICAL",            master = "LEFT_TO_RIGHT",      stack = "TOP_TO_BOTTOM" },
  { name = "floating master",      symbol = ">M>", split = "FLOATING_MASTER",     master = "LEFT_TO_RIGHT",      stack = "LEFT_TO_RIGHT" },
  { name = "deck",                 symbol = "[D]", split = "VERTICAL",            master = "TOP_TO_BOTTOM",      stack = "MONOCLE", symbolfunc = "decksymbols" },
  { name = "bstack",               symbol = "TTT", split = "HORIZONTAL",          master = "LEFT_TO_RIGHT",      stack = "LEFT_TO_RIGHT" },
  { name = "bstackhoriz",          symbol = "===", split = "HORIZONTAL",          master = "LEFT_TO_RIGHT",      stack = "TOP_TO_BOTTOM" },
  { name = "bstackgrid",           symbol = "==#", split = "HORIZONTAL",          master = "TOP_TO_BOTTOM",      stack = "GAPLESSGRID_CFACTS" },
  { name = "centeredmaster",       symbol = "|M|", split = "CENTERED_VERTICAL",   master = "LEFT_TO_RIGHT",      stack = "TOP_TO_BOTTOM",     stack2 = "TOP_TO_BOTTOM" },
  { name = "centeredmaster horiz", symbol = "-M-", split = "CENTERED_HORIZONTAL", master = "TOP_TO_BOTTOM",      stack = "LEFT_TO_RIGHT",     stack2 = "LEFT_TO_RIGHT" },
  { name = "gapless grid",         symbol = ":::", split = "NO_SPLIT",            master = "GAPLESSGRID_CFACTS", stack = "GAPLESSGRID_CFACTS" },
  { name = "fibonacci dwindle",    symbol = "[\]", split = "NO_SPLIT",            master = "DWINDLE_CFACTS",     stack = "DWINDLE_CFACTS" },
  { name = "fibonacci spiral",     symbol = "(@)", split = "NO_SPLIT",            master = "SPIRAL_CFACTS",      stack = "SPIRAL_CFACTS" },
  { name = "tatami mats",          symbol = "[T]", split = "VERTICAL",            master = "LEFT_TO_RIGHT",      stack = "TATAMI_CFACTS" },
  { name = "floating",             symbol = "><>" },
)

# Click options:
#    ClkLtSymbol  ClkWinTitle  ClkStatusText ClkClientWin ClkRootWin  ClkWorkspaceBar
# Modifier options:
#    Super  Shift  Alt  Ctrl  AltGr  ShiftGr (or no modifier if not set)
#
# https://github.com/bakkeby/dusk/wiki/Button-Bindings
#
button_bindings = (
  { click = "ClkLtSymbol", modifier = "None", button = 1, function = "setlayout", argument = -1 },  # toggles between current and previous layout
  { click = "ClkLtSymbol", modifier = "None", button = [4, 5], function = "cyclelayout", argument = [+1, -1] },  # cycle through the available layouts
  { click = "ClkWinTitle", modifier = "None", button = 1, function = "focuswin" },  # focus on the given client
  { click = "ClkWinTitle", modifier = "None", button = 3, function = "showhideclient" },  # hide the currently selected client (or show if hidden)
  { click = "ClkWinTitle", modifier = "None", button = 2, function = "zoom" },  # moves the currently focused window to/from the master area (for tiled layouts)
  { click = "ClkStatusText", modifier = "None", button = [1, 2, 3, 4, 5, 6, 7, 8, 9], function = "statusclick", argument = [1, 2, 3, 4, 5, 6, 7, 8, 9] },  # sends mouse button presses to statusclick script when clicking on status modules
  { click = "ClkStatusText", modifier = "Shift", button = [1, 2, 3], function = "statusclick", argument = [10, 11, 12] },
  { click = "ClkClientWin", modifier = "Super", button = [8, 9], function = "markmouse", argument = [1, 0] },  # toggles marking of clients under the mouse cursor for group action
  { click = "ClkClientWin", modifier = "Super", button = 1, function = "moveorplace", argument = 1 },  # moves a client window into a floating or tiled position depending on floating state
  { click = "ClkClientWin", modifier = "Super+Shift", button = 1, function = "togglemoveorplace" },  # as above, but forces a tiled client to become floating and vice versa
  { click = "ClkClientWin", modifier = "Super+Alt", button = 2, function = "togglefloating" },  # toggles between tiled and floating arrangement for given client
  { click = "ClkClientWin", modifier = "Super", button = 3, function = "resizeorfacts" },  # toggles between tiled and floating arrangement for given client
  { click = "ClkClientWin", modifier = "Super+Shift", button = 3, function = "resizemouse" },  # change the size of a floating client window
  { click = "ClkClientWin", modifier = "None", button = 8, function = "movemouse" },  # move a client window using extra mouse buttons (previous)
  { click = "ClkClientWin", modifier = "None", button = 9, function = "resizemouse" },  # resize a client window using extra mouse buttons (next)
  { click = "ClkClientWin", modifier = "Super", button = 2, function = "zoom" },  # moves the currently focused window to/from the master area (for tiled layouts)
  { click = ["ClkClientWin", "ClkRootWin"], modifier = "Super+Ctrl", button = 1, function = "dragmfact" },  # dynamically change the size of the master area compared to the stack area(s)
  { click = ["ClkClientWin", "ClkRootWin"], modifier = "Super+Ctrl", button = 3, function = "dragwfact" },  # dynamically change the size of a workspace relative to other workspaces
  { click = "ClkClientWin", modifier = "Super", button = [4, 5], function = "inplacerotate", argument = [+1, -1] },  # rotate clients within the respective area (master, primary stack, secondary stack)
  { click = "ClkClientWin", modifier = "Super+Shift", button = [4, 5], function = "rotatestack", argument = [+1, -1] },  # rotate all clients
  { click = "ClkWorkspaceBar", modifier = "None", button = 1, function = "viewws" },  # view the workspace by clicking on workspace icon
  { click = "ClkWorkspaceBar", modifier = "Super", button = 1, function = "movews" },  # sends (moves) the currently focused client to given workspace
  { click = "ClkWorkspaceBar", modifier = "Super+Shift+Ctrl", button = 1, function = "swapws" },  # swaps all clients on current workspace with that of the given workspace
  { click = "ClkWorkspaceBar", modifier = "None", button = 3, function = "enablews" },  # enables the workspace in addition to other workspaces
  { click = "ClkWorkspaceBar", modifier = "None", button = [4, 5], function = "viewwsdir", argument = [+2, -2] },  # view the workspace adjacent of current workspace that has clients (on the current monitor)
  { click = "ClkWorkspaceBar", modifier = "Super", button = 2, function = "togglepinnedws" },  # toggles the pinning of a workspace to the current monitor
)

# Keybinding options:
#   type       KeyPress, KeyRelease - defaults to KeyPress
#   modifier   Super, Shift, Alt, Ctrl, AltGr, ShiftGr - can be combined (defaults to no modifier)
#   key        keysym name without the XK_ prefix, e.g. "bracketright", look these up using xev
#   function   the function to call when the key combination is pressed
#   argument   the argument to pass to the function (integer or named command)
#
# https://github.com/bakkeby/dusk/wiki/Key-Bindings
#
keybindings = (
  { modifier = "Super", key = "d", function = "spawn", argument = "dmenucmd" },  # spawn dmenu for launching other programs
  { modifier = "Super", key = "Return", function = "spawn", argument = "termcmd" },  # spawn a terminal
  { modifier = "Super+Shift", key = "Return", function = "riospawn", argument = "termcmd" },  # draw/spawn a terminal
  { modifier = "Super", key = "b", function = "togglebar" },  # toggles the display of the bar(s) on the current monitor
  { modifier = "Super", key = ["j", "k"], function = "focusstack", argument = [+1, -1] },  # focus on the next/previous client in the stack
  { modifier = "Super+Alt+Shift", key = ["j", "k"], function = "focusstack", argument = [+2, -2] },  # focus on hidden clients
  { modifier = "Super", key = ["Left", "Right", "Up", "Down"], function = "focusdir", argument = ["LEFT", "RIGHT", "UP", "DOWN"] },  # focus on the client adjacent to currently focused client
  { modifier = "Super+Ctrl", key = ["Left", "Right", "Up", "Down"], function = "placedir", argument = ["LEFT", "RIGHT", "UP", "DOWN"] },  # swap places with the client adjacent to the current client
  { modifier = "Super+Ctrl", key = ["j", "k"], function = ["pushdown", "pushup"] },  # move the selected client up/down the stack
  { modifier = "Super", key = ["i", "u"], function = "incnmaster", argument = [+1, -1] },  # increase/decrease the number of clients in the master area
  { modifier = "Super+Ctrl", key = ["i", "u"], function = "incnstack", argument = [+1, -1] },  # increase/decrease the number of clients in the primary (first) stack area
  { modifier = "Super", key = ["h", "l"], function = "setmfact", argument = [-0.05, +0.05] },  # increase/decrease the number of clients in the primary (first) stack area
  { modifier = "Super+Shift", key = ["h", "l"], function = "setcfact", argument = [-0.25, +0.25] },  # increase/decrease client size respective to other windows within the same area
  { modifier = "Super+Shift", key = "o", function = "setcfact", argument = 0 },  # reset client cfact
  { modifier = "Super", key = "backslash", function = "togglepinnedws" },  # toggle pinning of currently selected workspace on the current monitor
  { modifier = "Super", key = "z", function = "showhideclient" },  # hide the currently selected client (or show if hidden)
  { modifier = "Super", key = "q", function = "killclient" },  # close the currently focused window
  { modifier = "Super+Shift", key = "q", function = "restart" },  # restart dusk
  { modifier = "Super+Ctrl+Alt", key = "q", function = "quit" },  # exit dusk
  { modifier = "Super", key = "v", function = "group" },  # groups floating clients together
  { modifier = "Super+Shift", key = "v", function = "ungroup" },  # ungroups floating clients
  { modifier = ["Super", "Super+Ctrl", "Super+Alt"], key = "a", function = "markall", argument = ["ALL", "FLOATING", "HIDDEN"] },  # marks all/floating/hidden clients on the selected workspace
  { modifier = "Super+Shift", key = "a", function = "unmarkall" },  # unmarks all clients
  { modifier = "Super", key = "m", function = "togglemark" },  # marks or unmarks the selected client for group action
  { modifier = "Super", key = "n", function = "zoom" },  # moves the currently focused window to/from the master area (for tiled layouts)
  { modifier = ["Super", "Super+Alt", "Super+Shift", "Super+Ctrl"], key = "bracketleft", function = "rotatelayoutaxis", arguments = [-1, -2, -3, -4] },  # cycle through layout splits and arrangements
  { modifier = ["Super", "Super+Alt", "Super+Shift", "Super+Ctrl"], key = "bracketright", function = "rotatelayoutaxis", arguments = [1, 2, 3, 4] },  # cycle through layout splits and arrangements
  { modifier = "Super+Ctrl", key = "m", function = "mirrorlayout" },  # flip the master and stack areas
  { modifier = "Super+Ctrl+Shift", key = "m", function = "layoutconvert" },  # flip between horizontal and vertical layout
  { modifier = "Super", key = "space", function = "setlayout", argument = -1 },  # toggles between current and previous layout
  { modifier = "Super+Ctrl", key = "g", function = "floatpos", argument = "50% 50% 80% 80%" },  # center client and take up 80% of the screen
  { modifier = "Super", key = "g", function = "togglefloating" },  # toggles between tiled and floating arrangement for the currently focused client
  { modifier = "Super", key = "f", function = "togglefullscreen" },  # toggles fullscreen for the currently selected client
  { modifier = "Super+Shift", key = "f", function = "togglefakefullscreen" },  # toggles "fake" fullscreen for the selected window
  { modifier = "Ctrl+Alt", key = "Tab", function = "togglenomodbuttons" },  # disables / enables keybindings that are not accompanied by any modifier buttons for a client
  { modifier = "Super+Shift", key = ["equal", "minus"], function = "changeopacity", argument = [+0.05, -0.05] },  # increase/decrease the client opacity (for compositors that support _NET_WM_OPACITY)
  { modifier = "Super+Shift", key = ["comma", "period"], function = "focusmon", argument = [-1, +1] },  # focus on the previous/next monitor, if any
  { modifier = "Super+Alt", key = ["comma", "period"], function = "clienttomon", argument = [-1, +1] },  # sends the current client to an adjacent monitor
  { modifier = "Super+Alt+Shift", key = ["comma", "period"], function = "clientstomon", argument = [-1, +1] },  # sends all clients to an adjacent monitor
  { modifier = "Super+Ctrl", key = "0", function = "viewallwsonmon" },  # view all workspaces on the current monitor
  { modifier = "Super", key = "0", function = "viewalloccwsonmon" },  # view all workspaces on the current monitor that has clients
  { modifier = "Super", key = "o", function = "viewselws" },  # view the selected workspace (only relevant when viewing multiple workspaces)
  { modifier = "Super+Ctrl", key = ["comma", "period"], function = "viewwsdir", argument = [-1, +1] },  # view the adjacent workspace (on the current monitor)
  { modifier = "Super", key = ["comma", "period"], function = "viewwsdir", argument = [-2, +2] },  # view the adjacent workspace that has clients (on the current monitor)
  { modifier = ["Super+Shift", "Super"], key = "Tab", function = "viewwsdir", argument = [-2, +2] },  # view the adjacent workspace that has clients (on the current monitor)
  { modifier = "Super+Ctrl+Alt", key = ["comma", "period"], function = "movewsdir", argument = [-1, +1] },  # move client to adjacent workspace (on the current monitor)

  # Scratchpad examples
  { modifier = ["Super", "Super+Ctrl", "Super+Ctrl+Shift"], key = "w", function = ["togglescratch", "setscratch", "removescratch"], argument = "spcmd_w" },
  { modifier = ["Super", "Super+Ctrl", "Super+Ctrl+Shift"], key = "e", function = ["togglescratch", "setscratch", "removescratch"], argument = "spcmd_e" },
  { modifier = ["Super", "Super+Ctrl", "Super+Ctrl+Shift"], key = "r", function = ["togglescratch", "setscratch", "removescratch"], argument = "spcmd_r" },

  # Workspace keyboard shortcuts
  { modifier = "Super",                function = "comboviewwsbyname",   key = ["1","2","3","4","5","6","7","8","9"], argument = ["1","2","3","4","5","6","7","8","9"] },
  { modifier = "Super+Alt",            function = "enablewsbyname",      key = ["1","2","3","4","5","6","7","8","9"], argument = ["1","2","3","4","5","6","7","8","9"] },
  { modifier = "Super+Shift",          function = "movetowsbyname",      key = ["1","2","3","4","5","6","7","8","9"], argument = ["1","2","3","4","5","6","7","8","9"] },
  { modifier = "Super+Ctrl",           function = "sendtowsbyname",      key = ["1","2","3","4","5","6","7","8","9"], argument = ["1","2","3","4","5","6","7","8","9"] },
  { modifier = "Super+Ctrl+Shift",     function = "movealltowsbyname",   key = ["1","2","3","4","5","6","7","8","9"], argument = ["1","2","3","4","5","6","7","8","9"] },
  { modifier = "Super+Ctrl+Alt",       function = "moveallfromwsbyname", key = ["1","2","3","4","5","6","7","8","9"], argument = ["1","2","3","4","5","6","7","8","9"] },
  { modifier = "Super+Ctrl+Alt+Shift", function = "swapwsbyname",        key = ["1","2","3","4","5","6","7","8","9"], argument = ["1","2","3","4","5","6","7","8","9"] },

  # stacker keybinding examples
# { modifier = "AltGr+Ctrl", function = "stackfocus", key = ["j","k","s","w","e","a","z"], argument = ("INC(+1)", "INC(-1)", "PREVSEL", 1, 2, 3, "LASTILED") },
# { modifier = "AltGr+Ctrl+Shift", function = "stackpush", key = ["j","k","s","w","e","a","z"], argument = ("INC(+1)", "INC(-1)", "PREVSEL", 1, 2, 3, "LASTILED") },
# { modifier = "AltGr+Shift", function = "stackswap", key = ["j","k","s","w","e","a","z"], argument = ("INC(+1)", "INC(-1)", "PREVSEL", 1, 2, 3, "LASTILED") },
)

# This relates to the StackerIcons functionality. The stacker icon symbols are derived from the
# keybindings for the stackfocus function, but can be substituted by using overrides (e.g. for
# long named keysyms).
#
# The icon symbol can optionally have a prefix and/or a suffix, e.g. for the keybinding "a"
# combined with square brackes we end up with the stacker icon of "[a]". The prefix, suffix and
# overrides can contain status2d markup.
#
# The position adds some control over where the stacker icon is placed in the window title.
# Options are:
#    RightOfWindowIcon  LeftOfWindowIcon  TitlePrefix  TitleSuffix  TitleEllipsis
#
# Overrides allow for longer named keysyms to be replaced with something shorter like a single
# character.
#
# Example configuration:
#   overrides = (
#     { replace: "comma", with: "," },
#     { replace: "semicolon", with: ";" },
#   )
#
# https://github.com/bakkeby/dusk/wiki/StackerIcons
#
stacker_icons = {
  prefix = "[",
  suffix = "]",
  position = "RightOfWindowIcon",
  overrides = ()
}

# Client rules allows for some control over windows when they first appear.
# A typical use case is to place the window on a designated workspace.
#
# The window matching options can be found via xprop.
#
#     WM_CLASS(STRING) = instance, class
#     WM_NAME(STRING) = title
#     WM_WINDOW_ROLE(STRING) = role
#     _NET_WM_WINDOW_TYPE(ATOM) = wintype
#
# Window matching options:
#    class  role  instance  title  wintype  transient
#
# Values to set on match:
#    opacity   flags     floatpos     scratchkey  workspace
#    iconpath  alttitle  swallowedby  swallowkey  label
#
# Other options:
#    resume
#
# https://github.com/bakkeby/dusk/wiki/Client_Rules
#
client_rules = (
  { wintype = "_KDE_NET_WM_WINDOW_TYPE_OVERRIDE", flags = ["Unmanaged"] },
  { wintype = "DESKTOP", flags = ["Unmanaged", "Lower"] },
  { wintype = "DOCK", flags = ["Unmanaged", "Raise"] },
  { wintype = "DIALOG", flags = ["AlwaysOnTop", "Centered", "Floating"] },
  { wintype = "UTILITY", flags = ["AlwaysOnTop", "Centered", "Floating"] },
  { wintype = "TOOLBAR", flags = ["AlwaysOnTop", "Centered", "Floating"] },
  { wintype = "SPLASH", flags = ["AlwaysOnTop", "Centered", "Floating"] },
  { instance = "spterm (w)", scratchkey = "w", flags = ["Floating"] },
  { instance = "spterm (e)", scratchkey = "e", flags = ["Floating"] },
  { instance = "spfm (r)", scratchkey = "r", flags = ["Floating"] },
  { class = "Gimp", workspace = "5", flags = ["Floating", "SwitchWorkspace"] },
  { class = "firefox", workspace = "3", flags = ["AttachMaster", "SwitchWorkspace"] },
  { class = "Steam", workspace = "8", flags = ["Floating", "Centered"] },
  { class = "steam_app_", flags = ["SteamGame", "Floating", "Centered"] },
  { class = "Google-chrome", role = "GtkFileChooserDialog", floatpos = "50% 50%", flags = ["AlwaysOnTop", "Floating"] },
  { role = "pop-up", flags = ["AlwaysOnTop", "Floating", "Centered"] },
  { role = "browser", workspace = "8", flags = ["AttachBelow", "OnlyModButtons", "SwitchWorkspace"] },
  { class = "Gnome-terminal", role = "gnome-terminal-preferences", flags = ["Centered"] },
  { class = "Diffuse", workspace = "4", flags = ["NoSwallow", "SwitchWorkspace", "RevertWorkspace"] },
  { class = "File-roller", workspace = "9", flags = ["Centered", "Floating", "SwitchWorkspace", "RevertWorkspace"] },
  { class = "Alacritty", flags = ["Terminal"] },
  { class = "st-256color", flags = ["Terminal", "AttachBottom"] },
  { class = "XTerm", flags = ["Terminal"] },
  { class = "Xephyr", flags = ["NoSwallow", "Floating", "Centered"] },
  { title = "Event Tester", flags = ["NoSwallow"] },
)

# When using the mouse to perform certain operations like moving windows around, resizing windows or
# changing the master/stack factor then the refresh rate is by default set to 60 frames per second.
#
# In practice this means that the window manager will only pick up mouse cursor movement
# notifications at that interval. The number 60 is chosen as good middle ground between smooth
# operation and that it will still perform well on a low spec computer.
#
# By default end users are not expected to change the refresh rate values, but users with a
# performant machine and monitors with higher refresh rates may want to increase the refresh rate
# to e.g. 120Hz.
#
# In general setting a higher refresh rate will make certain operations feel more smooth.
#
# The main risk is that if the handling of a mouse movement notification takes _longer_ than the
# interval at which the window manager picks them up then the window manager may start to lag
# behind with an increasing backlog of notifications to pick up.
#
# global_hz will, as the name suggests, control the refresh rate of all mouse operations globally
# unless the refresh rate for a function is specified.
#
# Note that some mouse operations may be heavier computation wise and result in lag when setting a
# higher refresh rate. As such it is possible to specify the refresh rate on a per function basis
# so that they can be tuned individually.
#
refresh_rates:
{
  global_hz = 60;
  #dragcfact_hz = 60;
  #dragfact_hz = 60;
  #dragmfact_hz = 60;
  #dragwfact_hz = 60;
  #movemouse_hz = 60;
  #placemouse_hz = 60;
  #resizemouse_hz = 60;
  #swallowmouse_hz = 60;
  #markmouse_hz = 60;
}
